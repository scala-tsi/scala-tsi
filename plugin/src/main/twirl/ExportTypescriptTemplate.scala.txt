@(imports: Seq[String], classes: Seq[String], targetFile: String, useSemicolons: Boolean, header: String, taggedUnionDiscriminator: Option[String])

package com.scalatsi.generator

import com.scalatsi._
import com.scalatsi.output._
import com.scalatsi.TypescriptType._
import com.scalatsi.TSType._
import java.io.File

/** User imports */
@for(imp <- imports) {
import @imp }

object ExportTypescript {
  // If you get a generator or implicit not found error here, make sure you have defined a TSType[T] implicit and imported it
  val toOutput: Map[String, TypescriptType] = Map[String, TypescriptType](
    @for(userClass <- classes) {
      """@userClass""" -> TSType.getOrGenerate[@userClass].get, }
  )

  val options = output.OutputOptions(
    targetFile = new File("""@targetFile"""), // Warning: always use literal string here for windows paths with \
    styleOptions = output.StyleOptions(
      semicolons = @useSemicolons,
      taggedUnionDiscriminator = @taggedUnionDiscriminator match {
        case Some(s) => { Some("""@s""") }
        case None => { None }
      }
    ),
    header = if("""@header""" == "") None else Some("""@header""")
  )

  def main(args: Array[String]): Unit = WriteTSToFiles.generate(options)(toOutput)
}
